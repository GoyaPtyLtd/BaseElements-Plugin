"1" = "GyBE1nnYYnn";
"102" = "BE_Version|Version|Returns the plugin version number as text, eg 1.1.3";
"103" = "BE_VersionAutoUpdate|Version Auto Update|The text of the plugin number, formatted as an 8 digit number, eg 00010712";
"104" = "BE_ClipboardFormats|Clipboard Formats|Returns a return delimited list of the formats of the content of the current clipboard.";
"105" = "BE_ClipboardGetText ( format )|Clipboard Text Get|Tries to convert the item on the current clipboard, designated by the format passed to the function. The function will only deal with text objects, so other clipboard types are ignored. To get other types use BE_ClipboardGetFile";
"106" = "BE_ClipboardSetText ( text ; format )|Clipboard Text Set|Sets the clipboard to the text and applies a clipboard format. Clipboard formats are usually set by the application and depend on the content types. When setting a type it's best to copy a sample and then use BE_ClipboardFormats to see what types are used. You only need to apply a single format when setting the clipboard. To set non-text data use BE_ClipboardSetFile";
"107" = "BE_FolderCreate ( path )|Folder Create|Creates a new folder at the location path.";
"108" = "BE_FileDelete ( path )|File Delete|Deletes the file at location path. This function doesn't send files to the trash or recycle bin, so use with caution. Files deleted are gone.";
"109" = "BE_FileExists ( path )|File Exists|Checks if the file or folder given in the path exists and returns True or False. For folders it accepts the name of the folder (and reports existence correctly) with or without a trailing / ";
"110" = "BE_FileReadText ( pathOrContainer { ; start ; to ; eolChar } )|File Text Read|Reads the contents of the file at path as text and returns the content. Use `start`, `to` and `eolChar` to extract a portion of the file. Pass eolChar as empty to read characters. Pass `start` as empty or greater than `to` to read from the end of the file";
"111" = "BE_FileWriteText ( pathOrContainer ; text { ; appendBoolean } )|File Text Write|Writes the contents specified in text to the file at the path or to a container field via Set Field. Using the optional append parameter you can choose to either write a new file ( or overwrite an existing one ), or to append the text to the end of the file.\n\nDefaults to UTF-8 ( no BOM ) which can be changed using the BE_SetTextEncoding function.";
"112" = "BE_FileSelectDialog ( prompt { ; inFolderPath } )|File Select|Displays the standard OS select file dialog. Changes the title of the dialog to the prompt specified, and optionally starts with the path given by the inFolder parameter, otherwise uses the most recent application folder.";
"113" = "BE_FolderSelectDialog ( prompt { ; inFolderPath } )|Folder Select|Displays the standard OS select folder dialog which doesn't allow you to choose a file, only a folder. Changes the title of the dialog to the prompt specified, and optionally starts with the path given by the inFolder parameter, otherwise uses the most recent application folder.";
"114" = "BE_DialogDisplay ( title ; message ; defaultButton { ; cancelButton ; alternateButton } )|Dialog Display|Puts up a dialog almost exactly the same as the one that you can get with the Show Custom Dialog script step, minus the fields. Use this function when you want to display a dialog from a calculation instead of a script step.";
"115" = "BE_XSLT_Apply ( xmlFilePath ; xsltText ; outputFilePath {; scriptName ; databaseName ; [xsltText ; outputPath] ; ... } )|XML XSLT Apply|Applies the XSLT given by the xslt parameter, to the XML file at xmlFilePath, and writes the output to outputFilePath. When when scriptName is given processing tasks place in the background and the script is called when complete. If fileName is not supplied the script must be in the current file. To process multiple input files simultaneously supply additional [xsltText ; outputPath] pairs.";
"116" = "BE_TextExtractWords ( text { ; wordPrefix } )|Text Extract Word|Generates a list of words within the text that start with the wordPrefix character.";
"117" = "BE_XMLStripInvalidCharacters ( path ; { resultFilePath } )|XML Strip Invalid Characters|Removes characters that are considered invalid in UTF16 XML, that will prevent parsing of the document.";
"118" = "BE_FileMove ( fromFilePath ; toFilePath {; replaceDestinationFile } )|File Move|Moves the file specified in the from parameter, to the location in the to parameter.\n\nNote : on Mac OS X, the Move operation only works if the source and Destination are on the same volume. To move files across volumes, use a Copy and then Delete the original.\n";
"119" = "BE_FileCopy ( fromFilePath ; toFilePath {; replaceDestinationFile } )|File Copy|Copies the file specified in the from path parameter, to the location in the to path parameter. Both paths are full paths not folders, including the output filename.";
"121" = "BE_FileListFolder ( path { ; type ; includeSubdirBoolean ; useFullPathBoolean ; includeHiddenBoolean } )|Files Folder List|Lists the contents of a folder at the path, both files and folders by default or use a type from BE_FileTypeAll, BE_FileTypeFile, or BE_FileTypeFolder. With the includeSubdirectories parameter set to true, it will recursively go into every sub folder and return all the results it finds. useFullPath will change the output to include full paths instead of just filenames. includeHidden, the default is true, determines if hidden files and directories are included in the results.\n\nNotes:\n\nThe includeSubdirectories option means that it will try every single subfolder. Be cautious when using this as it may take a long time to traverse all the sub folders. \n\nAlso it is more than likely that at some point it will throw an error as it will come across a folder or file it doesn't have access to. Then the function will stop and return error 13, and no data. Managing individual errors like that amongst a potentially large set of files is beyond the scope of this function as implemented.\n\nIf you're getting error 13 when using this flag, consider doing without it and traversing the sub folders via script or recursion and ignoring the access error codes instead.";
"124" = "BE_OpenURL ( url )|URL Open|Sends the url to the users default web browser.";
"125" = "BE_FileOpen ( path )|File Open|Opens the file or folder at path using the default application.";
"126" = "BE_FileSize ( path )|File Size|Returns the number of bytes in the file at path.";
"127" = "BE_FileModificationTimestamp ( path )|File Modification Timestamp|Returns the OS file modification time. Usually in seconds, so can be converted to a timestamp like : GetAsTimestamp ( BE_FileModificationTimestamp ( path ) ). However it is up to the Operating system as to what time it returns, and some OS versions may be more precise ( down to the millisecond ) and so the result could be different in different or future versions.";
"128" = "BaseElements";
"131" = "GyBE1nnYYnn";
"132" = "https://docs.baseelementsplugin.com/";
"134" = "BE_DebugInformation|Debug Information|Returns state information for the plug-in";
"135" = "BE_ClipboardGetFile ( format { ; fileName } )|Clipboard Data Get|Tries to convert the item on the current clipboard, designated by the format passed to the function. When trying to get text from the clipboard use BE_ClipboardGetText";
"136" = "BE_ClipboardSetFile ( fileData ; format )|Clipboard Data Set|Sets the clipboard to the text and applies a clipboard format. Clipboard formats are usually set by the application and depend on the content types. When setting a type it's best to copy a sample and then use BE_ClipboardFormats to see what types are used. You only need to apply a single format when setting the clipboard. When setting a text object use BE_ClipboardSetText";
"137" = "BE_GetSystemDrive|Get System Drive|Returns the volume name on macOS and the system drive on Windows. Other platforms return an empty string. See also the FileMaker function Get ( SystemDrive )";
"141" = "BE_VersionPro|Version Pro|Returns true for the 'Pro' version of the plug-in and false otherwise.";
"150" = "BE_ScriptExecute ( scriptName { ; fileName ; parameter ; scriptControl } )|Script Execute|Performs the scriptName in the current file ( if no fileName provided, or in fileName if available ). Values for the scriptControl parameter are: Halt = 0, Exit = 1, Resume = 2, Pause = 3. If scriptControl is not set, or is invalid, Pause is sent. Scripts are run when the current script queue is empty, so you can't have a calculation within a script, call a script and have it start immediately, it will run at the completion of the current script stack. Script results are not set and cannot be returned.";
"151" = "BE_FileMakerSQL ( sqlStatement { ; columnSeparator ; rowSeparator ; databaseName ; asText ; outputPath } )|SQL|Performs SQL commands on the tables inside FileMaker. All SQL/DDL errors can be obtained via the BE_GetLastDDLError function. 'asText' determines if a text or conatiner object is returned, the default is 'true'. When outputPath is provided the result of the query, if successful, is save to a file at that path and the function returns an empty string.";
"152" = "BE_HTTP_GET ( url { ; fileName ; userName ; password } )|HTTP GET|Does a http GET function and returns the results. This uses the curl library so output will be similar to that. This is used in conjunction with the BE_HTTP_SetCustomHeader function to set custom headers in advance and the BE_HTTP_ResponseCode and BE_HTTP_ResponseHeaders functions to get the result values after the GET is complete. Use the BE_CurlTrace function to debug any errors.";
"153" = "BE_GetLastError|Error Last Get|Returns the last error generated by the plugin. Each of the libraries we use have their own error codes. Not currently applicable in all situtations.\n\nIn the case of the http functions we're using the curl libraries. You can try looking here : http://curl.haxx.se/libcurl/c/libcurl-errors.html";
"154" = "BE_MessageDigest ( text { ; algorithm ; encoding } )|Message Digest|Generate a message digest of text using an algorithm specified by one of:\nBE_MessageDigestAlgorithmMD5\nBE_MessageDigestAlgorithmSHA256\nBE_MessageDigestAlgorithmMDC2\nBE_MessageDigestAlgorithmSHA\nBE_MessageDigestAlgorithmSHA1\nBE_MessageDigestAlgorithmSHA224\nBE_MessageDigestAlgorithmSHA384\nBE_MessageDigestAlgorithmSHA512\nIf nenessary the encoding of text can be specified using \'encoding\'.";
"155" = "BE_GetLastDDLError|Error DDL|Returns the last DDL error generated by the plugin.";
"156" = "BE_HTTP_GETFile ( url ; path { ; userName ; password } )|HTTP File GET|Does a http GET function and returns the results as a file that is saved to disk or set into a container field if the path is not included.\n\nThis uses the curl library so output will be similar to that. This is used in conjunction with the BE_HTTP_SetCustomHeader function to set custom headers in advance and the BE_HTTP_ResponseCode and BE_HTTP_ResponseHeaders functions to get the result values after the GET is complete. Use the BE_CurlTrace function to debug any errors.";
"157" = "BE_DialogProgress ( title ; description { ; maximum } )|Dialog Progress|Shows either a barber pole progress dialog, or a regular start to finish progress dialog. For maximum, use a positive value for a progress dialog, or leave out for a barber pole dialog. Barber pole dialogs are closed by calling BE_DialogProgressUpdate with a positive integer \'number\' parameter. Regular dialogs are closed with any value greater than maximum.";
"158" = "BE_DialogProgressUpdate ( number { ; description } )|Dialog Progress Update|Used to either close a progress dialog, or advance a progress dialog to the next step. Does not return a result, however the BE_GetLastError will return 0 for a successful update and 1 when the user has clicked the Cancel button in a progress dialog.";
"159" = "BE_Pause ( milliseconds )|Pause|Pauses ( within the plugin code, so doesn't return to FMP ) for milliseconds.";
"160" = "BE_PreferenceSet ( key ; value { ; domain } )|Preference Set|Sets the preference value with the key in the preferences file located at the domain. If domain is not included, it will be\n\nMac : au.com.goya.baseelements.plugin-user\n\nWindows : Software\\Goya\\BaseElements\\PluginUser ( stored inside HKEY_CURRENT_USER ).\n\nYou can override the domain to specify a different file name on the mac, or a different path on Windows. To respect the various OS conventions you should use something similar to the above.";
"161" = "BE_PreferenceGet ( key { ; domain } )|Preference Get|Gets the preference value stored by BE_PreferenceSet that has the matching key. If domain is not included, it will be\n\nMac : au.com.goya.baseelements.plugin-user\n\nWindows : Software\\Goya\\BaseElements\\PluginUser ( stored inside HKEY_CURRENT_USER ).";
"162" = "BE_PreferenceDelete ( key { ; domain } )|Preference Delete|Gets the preference value stored by BE_PreferenceSet that has the matching key. If domain is not included, it will be\n\nMac : au.com.goya.baseelements.plugin-user\n\nWindows : Software\\Goya\\BaseElements\\PluginUser ( stored inside HKEY_CURRENT_USER ).";
"169" = "BE_Unzip ( archiveFilePath { ; outputFolderPath } )|Zip Unzip|Unzips the archive file found at the path archive. The unzipped file(s) are put into the same location as the zip file itself by default, or into the output_directory folder if specified. Any existing file(s) will be overwritten. The function returns a value list of paths to the extracted files.";
"170" = "BE_Unzip_Deprecated ( archiveFilePath { ; outputFolderPath } )|Zip Unzip|Unzips the archive file found at the path archive. The unzipped file(s) are put into the same location as the zip file itself by default, or into the output_directory folder if specified. Any existing file(s) will be overwritten.";
"171" = "BE_Zip ( filePathList { ; archiveFilePath } )|Zip|Compresses the file(s) found at the path file. If the archive parameter is not specified, then the zip file is put into the same folder as file and has the .zip extension appended to the filename. This will overwrite an existing file if it exists with that name already.";
"174" = "BE_SetTextEncoding ( { encoding } )|Set Text Encoding|Sets the text encoding format for any function that writes or reads text on disk, for example the BE_FileWriteText function. This is using the iconv library so the full list of encoding options can be found at http://www.gnu.org/software/libiconv/ or by typing 'iconv -l' on the command line of a Mac.";
"176" = "BE_ExportFieldContents ( field { ; outputPath } )|Export Field Contents|Exports the contents of the container field to disk at the outputPath specified.\n\nContainer fields should be inserted via \'Insert File\'. This provides a similar functionality to the Export Field Contents script step, but is also available via FileMaker Server. Also note that you can convert container types within a container via the BE_ConvertContainer function, so even if you didn\'t originally insert it via Insert File, it can be converted from an image to a file inside the container field itself.";
"177" = "BE_FileImport ( filePath { ; compressBoolean } )|File Import|Imports the contents of the file into a container field or variable, and optionally compresses the field.  Usually you would use this function with a Set Field step pointing to a container field.";
"178" = "BE_FilePatternCount ( path ; searchText )|File Pattern Count|As per the FMP function PatternCount where search is performed through a value list of files for a value list of search texts.";
"179" = "BE_FileReplaceText ( pathOrContainer ; expression ; replaceString { ; options } )|File Replace Text|Replace the text \'expression\' with the text \'replaceString\'.\n\noptions: \n\n i - case insensitive\n m - multiline (^ and $ match line by line rather than once, globally)\n s - . (dot) matches all characters, including newline\n x - ignore whitespace in the expression\n g - replace all\nWhen no options are specified the options default to \'gi\'\n";
"180" = "BE_HTTP_POST ( url ; parameters { ; userName ; password ; fileName } )|HTTP POST|Does a http POST function and returns the results. This uses the curl library so output will be similar to that. This is used in conjunction with the BE_HTTP_SetCustomHeader function to set custom headers in advance and the BE_HTTP_ResponseCode and BE_HTTP_ResponseHeaders functions to get the result values after the POST is complete. Use the BE_CurlTrace function to debug any errors.";
"181" = "BE_HTTP_ResponseCode|HTTP Response Code|Returns the value of the Response code from the previous HTTP call. Eg 403 for not found.";
"182" = "BE_HTTP_ResponseHeaders ( { header } )|HTTP Response Headers|Returns the headers set by the server as part of a response to the previous HTTP request.";
"183" = "BE_HTTP_SetCustomHeader ( { header ; value } )|HTTP Header Set Custom|Used for setting a header value before a HTTP function call. You can call this function multiple times before the POST to set more than one header, and call it with empty parameters to clear them out.";
"184" = "BE_HTTP_DELETE ( url { ; userName ; password } )|HTTP Delete|Does a HTTP DELETE function and returns the results. This uses the curl library so output will be similar to that. This is used in conjunction with the BE_HTTP_SetCustomHeader function to set custom headers in advance and the BE_HTTP_ResponseCode and BE_HTTP_ResponseHeaders functions to get the result values after the DELETE is complete. Use the BE_CurlTrace function to debug any errors.";
"185" = "BE_HTTP_PUTFile ( url ; path { ; userName ; password } )|HTTP PUT File|Does a HTTP PUT function with a referenced file and returns the results. This uses the curl library so output will be similar to that. This is used in conjunction with the BE_HTTP_SetCustomHeader function to set custom headers in advance and the BE_HTTP_ResponseCode and BE_HTTP_ResponseHeaders functions to get the result values after the PUT is complete. Use the BE_CurlTrace function to debug any errors.";
"186" = "BE_HTTP_SetProxy ( proxy { ; port ; userName ; password } )|HTTP Proxy Set|Used for setting the HTTP proxy values values before other HTTP function calls.";
"187" = "BE_CurlSetOption ( { option ; value } )|HTTP Curl Option Set|Sets one of the Curl library optional variables, as used in all of the HTTP functions. The value depends on the type of option. Some require explicit values ( such as CURLOPT_USERAGENT ) and others require a flag. The full list of options and their possible values is in the curl documentation here: http://curl.haxx.se/libcurl/c/curl_easy_setopt.html\n\nRestoring all values to their default can be done with\n\nBE_CurlSetOption\n\nTo return an option to it's default call the option name with no parameter :\n\nBE_CurlSetOption ( \'CURLOPT_HTTPAUTH\' )\n\nThe CURLOPT_HTTPAUTH and CURLOPT_PROXYAUTH options can also be set with the constants :\n\nCURLAUTH_BASIC\nCURLAUTH_DIGEST\nCURLAUTH_DIGEST_IE\nCURLAUTH_NEGOTIATE\nCURLAUTH_NTLM\nCURLAUTH_NTLM_WB\nCURLAUTH_ANY\nCURLAUTH_ANYSAFE\nCURLAUTH_ONLY";
"188" = "BE_HTTP_PUTData ( url ; data { ; userName ; password } )|HTTP PUT Data|Does a http PUT function with data and returns the results. This uses the curl library so output will be similar to that. This is used in conjunction with the BE_HTTP_SetCustomHeader function to set custom headers in advance and the BE_HTTP_ResponseCode and BE_HTTP_ResponseHeaders functions to get the result values after the PUT is complete. Use the BE_CurlTrace function to debug any errors.";
"189" = "BE_FTP_Upload ( url ; data { ; userName ; password } )|FTP Upload|Uploads the container field data to the ftp url specified. Authentication types can be set with the BE_CurlSetOption function. \n\nYou can also set it to create folders that don't exist by setting this flag before upload : BE_CurlSetOption ( \'CURLOPT_FTP_CREATE_MISSING_DIRS\' ; 1 )\n\nExample : BE_FTP_Upload ( \'ftp://example.com/path/folder/\' & FTPTest::File ; FTPTest::File )";
"190" = "BE_CurlTrace|HTTP Curl Trace|Returns a complete trace of the HTTP and SMTP details for the previous BE function call. This is useful for debugging HTTP or SMTP connection issues.";
"191" = "BE_FTP_Delete ( url { ; userName ; password } )|FTP Delete|Deletes a file at a specific ftp or sftp url. Authentication types can be set with the BE_CurlSetOption function. \n\nExample : BE_FTP_Delete ( \'ftp://example.com/path/folder/file.txt\' )";
"192" = "BE_HTTP_PATCH ( url ; parameters { ; userName ; password } )|HTTP Patch|Does a http PATCH function and returns the results. This uses the curl library so output will be similar to that. This is used in conjunction with the BE_HTTP_SetCustomHeader function to set custom headers in advance and the BE_HTTP_ResponseCode and BE_HTTP_ResponseHeaders functions to get the result values after the POST is complete. Use the BE_CurlTrace function to debug any errors.";
"193" = "BE_FTP_UploadFile ( url ; pathToFile { ; userName ; password } )|FTP Upload File|Uploads a file the to the ftp url specified. Performs the same task for files that BE_FTP_Upload does for container field data.";
"194" = "BE_CurlGetInfo ( getInfoOption )|Curl Get Info|Get information about the most recent curl (HTTP/FTP/SMTP) connection.";
"195" = "BE_BackgroundTaskAdd ( request_method ; when ; interval ; sql ; sql_file ; url ; post_args {; username ; password } )|Background Task Add|Perform a HTTPPost and set the result into a field in the background. Note: the parameters request_method and interval are not currently implemented.";
"196" = "BE_BackgroundTaskList|Background Task List|Return a value list of ids for pending background tasks";
"200" = "BE_XSLT_ApplyInMemory ( xmlText ; xsltText )|XML XSLT Memory|Applies the XSLT given by the _xslt_ parameter, to the XML given by the _xml_ parameter, and and returns the result. Performs the same as the BE_XSLT_Apply but without writing to disk.";
"201" = "BE_XPath ( xmlText ; xpathText { ; namespaceListText ; asTextBoolean } )|XML XPath|This finds the first instance of a node at the path xpath within the text xml. This function is based on the libxml library which only supports XPath 1.0 http://xmlsoft.org";
"202" = "BE_XPathAll ( xmlText ; xpathText { ; namespaceListText } )|XML XPath All|This finds all instances of a node at the path xpath within the text xml. This function is based on the libxml library which only supports XPath 1.0 http://xmlsoft.org";
"210" = "BE_XMLStripNodes ( inputFilePath ; outputFilePath ; nodeNames )|XML Strip Nodes|Removes all the names nodes from the XML file. See also the libcurl documentation at: https://curl.se/libcurl/c/curl_easy_getinfo.html";
"211" = "BE_XMLParse ( pathOrXMLText )|XML Parse|Parses an XML file at path or XML Text to determine if it's properly formed. When the first character of the input is a < the input is treated as XML Text, otherwise it is treated as a file path. Does not check XSD details, just whether every tag is properly opened and closed.";
"212" = "BE_SplitBEFileNodes ( path )|BaseElements Internal : function not documented.";
"213" = "BE_XMLValidate ( xmlText ; schemaText )|XML Validate Schema|Validates XML text against a schema.";
"214" = "BE_XMLCanonical ( xmlText ) |XML Canonical|Create the canonized image of the XML input.";
"215" = "BE_XMLTidy ( xml )|XML Tidy|Pretty-print the XML input. Note: pretty-printing XML data alters the information set of the document being written, since in XML all whitespace is potentially relevant.";
"220" = "BE_TimeCurrentMilliseconds|Time Current Milliseconds|Returns the current time as number of milliseconds. Effectively the same as GetAsNumber ( Get ( CurrentTimestamp ) ).";
"221" = "BE_TimeUTCMilliseconds|Time UTC Milliseconds|Returns UTC time as number of milliseconds, so allowing for time zone offsets.";
"222" = "BE_TimeZoneOffset|Time UTC Zone Offset|Returns the difference ( in minutes ) between UTC and local time.";
"230" = "BE_FileSaveDialog ( prompt { ; fileName ; inFolder } )|Dialog File Save|Displays the standard OS save file dialog. Changes the title of the dialog to the prompt specified, and optionally starts with the path given by the inFolder parameter, otherwise uses the most recent application folder.";
"240" = "BE_RegularExpression ( text ; expression { ; options ; replaceString } )|RegularExpression Regular Expression Regex|A perl compatible regular expression testing function. \n\noptions: \n\n i - case insensitive\n m - multiline\n s - dot matches all characters, including newline\n x - ignore whitespace\n g - replace/match all\n \nreplaceString: if not empty, then a replace is performed rather than a find.\n v - treat the input as a value list\n\nExamples :\n\nBE_RegularExpression ( \'abc 123 def\' ; \'[0-9]+\' ) = 123\n\nBE_RegularExpression ( $list; \'(?:\\S(?![ ]))+$\ \'igm\' )\n\nMore examples can be found here : http://perldoc.perl.org/perlre.html#Regular-Expressions";
"250" = "BE_ContainerIsCompressed ( containerField )|Container Compress|Verifies if a FileMaker containerField with a fil, or image in it, was compressed when inserted into the field.";
"251" = "BE_ContainerCompress ( data { ; fileName } )|Container Compress|Converts stored container field data between the internal un-compressed and compressed formats.";
"252" = "BE_ContainerUncompress ( gzip_data { ; fileName } )|Container Compress Uncompress|Converts stored container field data between the internal compressed and un-compressed formats.\n\nWhen inserting files into containers in FileMaker, you have the option to \'compress\' the file. This function can change an compressed file into a uncompressed file.";
"253" = "BE_ContainerListTypes ( container )|Container List Types|Returns a value list of the types stored in the container";
"254" = "BE_ContainerGetType ( container ; type )|Container Get Type|Return the data for the requested type from a container.";
"260" = "BE_Gzip ( data { ; fileName } )|Gzip zip|Compresses the file/text found in data and optionally applies the filename, otherwise uses the container data appended with the .gzip extension.\n\nThis function should be used with a Set Field script step and the results stored as a container field.";
"261" = "BE_UnGzip ( gzip_data { ; fileName } )|Gzip zip Ungzip unzip|Uncompresses the file found in gzip_data and optionally applies the filename, otherwise uses the detail found in the container field if it exists.\n\nIf you're unzipping a file, then this function should be used with a Set Field script step and the results stored as a container field. If you're expecting a text result then this could be used anywhere text is expected.";
"271" = "BE_JPEGRecompress ( jpeg { ; compressionLevel ; scale } )|JPEG Compress Recompress|Re-compresses the jpeg image file found at the container field jpeg, using a scaling factor and compression level. Use this function with a Set Field script step to convert one container to another. It can be used to set the same field as the one referenced in the field parameter.\n\nValues for the \'scale\' parameter are :\n\n2\n1.875\n1.75\n1.625\n1.5\n1.375\n1.25\n1.125\n1\n0.875\n0.75\n0.625\n0.5\n0.375\n0.25\n0.125\n\nAny other values are rounded down to the nearest value, except values below 0.125 where it will use 0.125.";
"272" = "BE_ContainerConvertImage ( image {; imageFormat } )||Convert an image in a container to a different format. Supported formats are HEIC (read-only), JPEG (default), GIF & PNG.";
"302" = "BE_JSON_ArraySize ( json { ; path } )|JSON Array Size|Returns the size of the JSON array";
"304" = "BE_JSON_jq ( json ; filter { ; options } )|JSON jq|An adaption of the jq JSON command line tool.";
"350" = "BE_ValuesUnique ( listOfValues { ; caseSensitiveBoolean } )|Values Unique|Removes duplicate values from listOfValues.";
"351" = "BE_ValuesFilterOut ( textToFilter ; filterValues { ; caseSensitiveBoolean } )|Values Filter Out|Does the opposite of the FilterValues function : it takes the textToFilter parameter, and removes anything in the filterValues list and returns the remaining values.";
"352" = "BE_ValuesContainsDuplicates ( listOfValues  { ; caseSensitiveBoolean } )|Values Duplicates Contains|Tests a list of values in FileMaker value list format and returns a True ( 1 ) or False ( 0 ) value if it contains duplicate values.";
"353" = "BE_ValuesSort ( listOfValues { ; ascendingBoolean ; type } )|Values Sort|Sorts a value list in alphanumeric order. In some situations this sort order won\'t be the same as the order that FileMaker would apply in a sorted field.";
"354" = "BE_ValuesTimesDuplicated ( listOfValues ; numberOfTimes )|Values Duplicates Times|Returns a list of values from listOfValues, where the value has been repeated numberOfTimes. In other words, filter the list to only those values that are repeated numberOfTimes. \n\nExample : BE_ValuesTimesDuplicated ( \'a¶c¶c¶d¶d\' ; 2 ) = \'c¶d\'.";
"355" = "BE_ValuesTrim ( listOfValues )|Values Trim|Trims leading whitespace from each and every value in listOfValues. Works the same as if you called the regular Trim recursively on each GetValue ( listOfValues ; n ) and then re-assembled the list result.";
"400" = "BE_SMTPServer ( server { ; port ; userName ; password ; keepOpen } )|SMTP Server|Stores the SMTP connections details for future calls to BE_SMTPSend. Authentication is controlled with curl, so options can be set with the BE_CurlSetOption function. Any future calls will overwrite the existing details.";
"401" = "BE_SMTPSend ( from ; to ; subject ; text { ; cc ; bcc ; replyTo ; html ; attachments } )|SMTP Send|Sends an email via SMTP. Use in conjunction with BE_SMTPServer. The To, CC, BCC and attachments can be passed value lists in order to send to multiple people or to include multiple attachments. \n\nEmail addresses are in the format :\n\nname@domain\n<name@domain>\nFullName <name@domain>\n\nIf you're including an actual name, you MUST include angle brackets around the email address.\n\nreplyTo must be an email address only and cannot include a name.\n\nThis function can also use the options in the BE_CurlSetOption function, where applicable.";
"402" = "BE_SMTPAddAttachment ( { attachment ; contentType } )|SMTP Attachment Add|Stores a list of container field files as attachments for future SMTP_Send functions. The fields will be sent with the subsequent SMTP_Send and then the stored list of fields cleared out.";
"403" = "BE_SMTPSetHeader ( { header ; value } )|SMTP Header Set|Adds a header to the email, much like the HTTP header. Can be used to set Reply-To or Priority for example.";
"470" = "BE_VariableSet ( name ; { value } )|Variable Set|Set a plugin variable to called name to value. Setting an empty value deletes the variable. Note: binary data types (containers) are not supported.";
"471" = "BE_VariableGet ( name )|Variable Get|Get the value of a plugin variable to called name. Getting the value of a variable that does not exist returns an empty string.";
"472" = "BE_StackPush ( name ; value )|Stack Push|Add a value to the top of the stack name. If the stack does not exist it is created.";
"473" = "BE_StackPop ( name )|Stack Pop|Remove a value from the top of the stack name. If the stack does not exist an empty string is returned.";
"474" = "BE_StackCount ( name )|Stack Count|The number of items in the stack.";
"475" = "BE_StackDelete ( name )|Stack Delete|Delete the stack and all values.";
"500" = "BE_EncryptAES ( key ; text )|Note: the FileMaker 16 function CryptEncrypt(data;key) also provides this functionality.";
"501" = "BE_DecryptAES ( key ; text )|Note: the FileMaker 16 function CryptDecrypt(container;key) also provides this functionality.";
"502" = "BE_SignatureGenerateRSA ( data ; privateKey { ; privateKeyPassword ; algorithm ; fileNameWithExtension } )|Signature RSA|Generate a digital signature of text using privateKey.";
"503" = "BE_SignatureVerifyRSA ( data ; publicKey ; signature { ; algorithm } )|Signature RSA Verify|Verify singature using publicKey.";
"504" = "BE_CipherEncrypt ( cipher ; data ; key ; iv { ; paddingBoolean ; fileNameWithExtension } )|Cipher Encrypt|Encrypt data using cipher.";
"505" = "BE_CipherDecrypt ( cipher ; encryptedData ; key ; iv { ; paddingBoolean ; fileNameWithExtension } )|Cipher Decrypt|Decrypt encryptedData using cipher.";
"506" = "BE_EncryptWithKey ( text ; keyText )|Encrypt Private Public Key|Encrypt the supplied text.";
"507" = "BE_DecryptWithKey ( encryptedText ; keyText )|Decrypt Private Public Key|Decrypt the supplied text. The decrypted data is returned base64 encoded.";
"508" = "BE_CreateKeyPair|Create Key Pair RSA Private|Create and RSA key pair and return the private key. To get the public key pass the return value to BE_GetPublicKey";
"509" = "BE_GetPublicKey ( privateKey )|Key Pair RSA public|Return a public key for the supplied private key.";
"600" = "BE_EvaluateJavaScript ( javaScript )|BaseElements Internal : function not yet documented.";
"650" = "BE_ArraySetFromValueList ( valueList { ; retainEmptyBoolean } )|Array Set ValueList|Stores the ValueList as an array within the plugin memory space and returns an index number that you can use to reference the array via memory.";
"651" = "BE_ArrayGetSize ( array )|Array Size Get|Returns the size in number of elements in a stored array. Technically equivalent to ValueCount for the list before it was stored as an array.";
"652" = "BE_ArrayGetValue ( array ; valueNumber )|Array Value Get|Retrieves a value from the array number specified, at the valueNumber specified.\n\nArrays are stored via BE_ArraySetFromValueList and the index number used as the array parameter is the result of that function call.";
"653" = "BE_ArrayDelete ( array )|Array Delete|Removes an array from memory completely.";
"654" = "BE_ArrayFind ( array ; value )|Array find|Returns the array number that matches the value.";
"655" = "BE_ArrayChangeValue ( array ; valueNumber ; newValue )|Array Change Value|Modifies the value in the array at valueNumber without changing the rest of the array.";
"700" = "BE_ConvertContainer ( field { ; type } )|Container Convert|This is to convert container field contents between the internal FileMaker \'image\' format and the internal \'file\' format. So you can do an Insert File step and then convert that to an image that will display instead of just seeing the file icon.This is not an image conversion function. It only converts between the two container formats, of file and image. So you can't use it to change the format of the contents of an email from PDF to JPEG for example.\n\nYou would use this function when you have a image file stored in a container that is showing as a file, rather than a picture. You use this function to alter the internal storage option to image so that it will display a preview.\n\nUse this function with a Set Field script step to convert from a container field stored as a file into a container image or vice versa. It can be used to set into the same field as the one referenced in the function parameter.\n\n1. If only the field is supplied then it is converted to \'FILE\'\n2. If \'ZLIB\' is supplied the file is compressed\n. Other known formats are:\n- \'snd \' *\n- \'JPEG\'\n- \'GIFf\' *\n- \'EPS \' *\n- \'META\' *\n- \'PNGf\'\n- \'BMPf\' *\n- \'PDF \'\n\n* = not tested.\n\nNote: when converting a PDF from a 'file' to an 'image' whether the thumbnail displays as an icon or a document preview behaves the same way as when a PDF from inside FileMaker.\n\n";
"750" = "BE_PDFAppend ( pdfPathOrContainer ; appendPathOrContainer { ; destinationPath } )|PDF Append|Appends PDF file 2 to file 1. appendPathOrContainer may be a value list of paths.";
"751" = "BE_PDFPageCount ( pdfPathOrContainer )|PDF Page Count|Returns a number corresponding to the number of pages in the PDF document.";
"752" = "BE_PDFGetPages ( pdfPathOrContainer ; newPDFPath ; fromPageNum { ; toPageNum } )|PDF Page Get|Copies a set of pages from a PDF and generates a new PDF with only those pages.";
"800" = "BE_XOR ( text ; xorWith )|XOR|Does an XOR on the text string.";
"850" = "BE_ScriptStepInstall ( name ; definitionXML ; id ; description ; calculation )|Script Step Install|Creates a new script step, using the definition supplied and returns the id for the step.";
"851" = "BE_ScriptStepRemove ( scriptStepId )|Script Step Remove|Deletes the script step definition from memory.";
"852" = "BE_ScriptStepPerform ( scriptStepId )|Script Step Perform ID|Does a perform script step using the ID provided instead of the script step name.";
"900" = "BE_VectorDotProduct ( a ; b )|Vector DotProduct|Does a dot product of two vectors ( lists ) of numbers. For more information about vectors, have a look at http://www.mathsisfun.com/algebra/vectors-dot-product.html";
"901" = "BE_VectorEuclideanDistance ( a ; b )|Vector EuclideanDistance|The euclidean distance between two vector points. For more information about this see https://en.wikipedia.org/wiki/Euclidean_distance";
"950" = "BE_GetMachineName|Machine Name Get|Gets the computer hardware identifier.";
"1001" = "BE_ButtonOK|OK Button|Matches the value returned by the BE_DialogDisplay function when the user clicks the alternateButton option - equivalent to 1.";
"1002" = "BE_ButtonCancel|Cancel Button|Matches the value returned by the BE_DialogDisplay function when the user clicks the cancelButton option - equivalent to 2.";
"1003" = "BE_ButtonAlternate|Alternate Button|Matches the value returned by the BE_DialogDisplay function when the user clicks the alternateButton option - equivalent to 3.";
"1120" = "BE_ExecuteSystemCommand ( command { ; timeout ; executeUsingShell } )|Execute System Command Shell|Performs a command line script of the command parameter. Essentially the same as using Terminal on the Mac, or CMD.exe on Windows.\n\nThe timeout is in milliseconds that the plugin should wait for a result before returning. Using a value of -1 will wait forever, until the command finishes. A value of 0 will return to FileMaker immediately, and any other value will wait a maximum of the time in milliseconds or when the command finishes, whichever is first.\n\nexecuteUsingShell defaults to 'true', effectively prefixing the command with \'cmd.exe /c\' (Windows) and \'/bin/sh -c\' (macOS/iOS/Linux). For example \'cmd.exe /c dir\' will list the directory contents. On the Mac this uses the \'sh\' shell, which is different from the default Terminal.app shell which is \'zsh\'. There can be syntax differences between commands using these shells, so if you find a difference between the two, first try running BE_ExecuteSystemCommand ( \'/bin/zsh -c \'commandhere\'\' ) to see if that removes the difference.";
"2001" = "BE_MessageDigestAlgorithmMD5|Message Digest Algorithm MD5|Named constant, = 1, for use with BE_MessageDigest";
"2002" = "BE_MessageDigestAlgorithmSHA256|Message Digest Algorithm SHA256|Named constant, = 2, for use with BE_MessageDigest";
"2004" = "BE_MessageDigestAlgorithmMDC2|Message Digest Algorithm MDC2|Named constant, = 4, for use with BE_MessageDigest";
"2006" = "BE_MessageDigestAlgorithmSHA|Message Digest Algorithm SHA|Named constant, = 6, for use with BE_MessageDigest";
"2007" = "BE_MessageDigestAlgorithmSHA1|Message Digest Algorithm SHA1|Named constant, = 7, for use with BE_MessageDigest";
"2008" = "BE_MessageDigestAlgorithmSHA224|Message Digest Algorithm SHA224|Named constant, = 8, for use with BE_MessageDigest";
"2009" = "BE_MessageDigestAlgorithmSHA384|Message Digest Algorithm SHA384|Named constant, = 9, for use with BE_MessageDigest";
"2010" = "BE_MessageDigestAlgorithmSHA512|Message Digest Algorithm SHA512|Named constant, = 10, for use with BE_MessageDigest";
"3000" = "BE_FileTypeAll|FileType All|For use with the function BE_FileListFolder as a flag for the \'type\' parameter.";
"3001" = "BE_FileTypeFile|FileType File|For use with the function BE_FileListFolder as a flag for the \'type\' parameter.";
"3002" = "BE_FileTypeFolder|FileType Folder|For use with the function BE_FileListFolder as a flag for the \'type\' parameter.";
"4001" = "BE_EncodingHex|Encoding Hex|Named constant, = 1, for use with BE_MessageDigest";
"4002" = "BE_EncodingBase64|Encoding Base64|Named constant, = 2, for use with BE_MessageDigest";
"5000" = "BE_ScriptControlHalt|Script Control Halt|For use with the function BE_ScriptExecute as an option for the \'scriptControl\' parameter.";
"5001" = "BE_ScriptControlExit|Script Control Exit|For use with the function BE_ScriptExecute as an option for the \'scriptControl\' parameter.";
"5002" = "BE_ScriptControlResume|Script Control Resume|For use with the function BE_ScriptExecute as an option for the \'scriptControl\' parameter.";
"5003" = "BE_ScriptControlPause|Script Control Pause|For use with the function BE_ScriptExecute as an option for the \'scriptControl\' parameter.";
"65000" = "Version: %@ - This plug-in provides additional functionality in FileMaker Pro. Visit goya.com.au for more info.";
