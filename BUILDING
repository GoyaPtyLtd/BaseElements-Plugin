=======================================================================
Building
=======================================================================

The following notes describe the process for building the the plugin and the third-party libraries used. The instructions are supplied "as is" in the hope they may be of assistance.

Notes:
- these instructions apply to version 3.3.5 of the BaseElements Plugin
- version 14.0.1.175 of the FileMaker plug-in SDK is required
- the instructions contain some full paths and also paths containing version numbers that will likely need to be changed

=======================================================================
Mac OS X
=======================================================================

Version 3.3.5 of the plug-in is built on Mac OS X 10.12.3 using Xcode 8.2.1. The Xcode Command Line Tools are also needed.

Download the FileMaker External Plug-In API from

	http://www.filemaker.com/support/technologies/

and place the FMWrapper.framework in the Libraries directory.

On the Mac most of the required headers and library files are installed by default on the system. The only third-party libraries that need to be built the Boost FileSystem, System and Thread libraries.

=======================================================================
Boost - 1.59_0
=======================================================================

Boost is available from

	http://www.boost.org/

The plug-in is a universal binary and the boost libraries should be built accordingly. For example:

	cd boost_1_59_0
	./bootstrap.sh
	./b2 architecture=x86 address-model=32 link=static runtime-link=static install --prefix=build --with-regex --with-date_time --with-filesystem --with-thread cxxflags="-stdlib=libc++ -mmacosx-version-min=10.7"

and

	./b2 architecture=x86 address-model=64 link=static runtime-link=static install --prefix=build64 --with-regex --with-date_time --with-filesystem --with-thread cxxflags="-stdlib=libc++ -mmacosx-version-min=10.7"

Then, to create the universal binaries

	lipo -create -arch i386 build/lib/libboost_date_time.a -arch x86_64 build64/lib/libboost_date_time.a -output <path to BaseElements-Plugin>/Libraries/osx/libboost_date_time.a
	lipo -create -arch i386 build/lib/libboost_filesystem.a -arch x86_64 build64/lib/libboost_filesystem.a -output <path to BaseElements-Plugin>/Libraries/osx/libboost_filesystem.a
	lipo -create -arch i386 build/lib/libboost_regex.a -arch x86_64 build64/lib/libboost_regex.a -output <path to BaseElements-Plugin>/Libraries/osx/libboost_regex.a
	lipo -create -arch i386 build/lib/libboost_system.a -arch x86_64 build64/lib/libboost_system.a -output <path to BaseElements-Plugin>/Libraries/osx/libboost_system.a
	lipo -create -arch i386 build/lib/libboost_thread.a -arch x86_64 build64/lib/libboost_thread.a -output <path to BaseElements-Plugin>/Libraries/osx/libboost_thread.a

See

	more/getting_started/index.html

for for further information on compiling the Boost libraries.

Copy the directory containing the boost headers from the build/include directory to the Headers directory and copy the files in the boost/lib directory to the Libraries directory.


=======================================================================
Jansson - 2.5
=======================================================================

Download the source from

	https://github.com/GoyaPtyLtd/jansson

and follow the supplied building instructions but with the following ./configure command (to build a universal binary)

	./configure CFLAGS="-arch i386 -arch x86_64 -mmacosx-version-min=10.7" LDFLAGS="-arch i386 -arch x86_64" --disable-dependency-tracking --prefix=build

Copy jansson.h and jansson_config.h from build/include to the Headers directory and  build/lib/libjansson.a to Libraries/osx.


=======================================================================
liboauth - 1.0.3
=======================================================================

Download the source from

	http://liboauth.sourceforge.net/

and follow the supplied building instructions but with the following ./configure command (to build a universal binary)

	./configure CFLAGS="-arch i386 -arch x86_64 -mmacosx-version-min=10.7" LDFLAGS="-arch i386 -arch x86_64" --disable-dependency-tracking

Copy oauth.h from ./src/ to the Headers directory and  ./src/.libs/liboauth.a to Libraries/osx.


=======================================================================
mimetic - 0.9.8
=======================================================================

Download the source from

	http://www.codesink.org/mimetic_mime_library.html#download

Edit the file mimetic/base64.h to replace the line

                *out = NL; ++out;

with

				*out = CR; ++out;
				*out = LF; ++out;

Follow the supplied building instructions using this ./configure command (to build a universal binary)

	./configure CXXFLAGS="-arch i386 -arch x86_64 -stdlib=libc++ -mmacosx-version-min=10.7" LDFLAGS="-arch i386 -arch x86_64 -stdlib=libc++" --disable-dependency-tracking --prefix=build && make install

Copy the directory containing the mimetic headers from the build/include directory to the Headers directory and copy the library in the boost/lib directory to the Libraries/osx directory.


=======================================================================
OpenSSL - 1.0.2g
=======================================================================

Download the latest openssl source from

	http://www.openssl.org/source/

To build the 32-bit library

	cd openssl-1.0.2g
	./Configure darwin-i386-cc -mmacosx-version-min=10.7 --prefix=/Users/mark/Desktop/openssl/build32
	make install
	
For the 64-bit build

	make clean
	./Configure darwin64-x86_64-cc -mmacosx-version-min=10.7 --prefix=/Users/mark/Desktop/openssl/build64
	make install

Then, to make the universal libraries

	cd ~/Desktop/openssl
	lipo -create build64/lib/libcrypto.a build32/lib/libcrypto.a -output libcrypto.a
	lipo -create build64/lib/libssl.a build32/lib/libssl.a -output libssl.a

Copy libcrypto.a and libssl.a to Libraries/osx and copy build64/include/openssl to Headers.


=======================================================================
libssh2 - 1.7.0
=======================================================================

Download the source from

	http://www.libssh2.org/

Unpack the archive and in the distribution directory

	CFLAGS="-arch x86_64 -arch i386 -mmacosx-version-min=10.7 -I<path_to_openssl/include>" LDFLAGS="-arch i386 -arch x86_64 -L<path_to_openssl/lib>" ./configure --with-openssl --with-libz --without-libgcrypt --prefix=<path_to_install_libssh2> -exec-prefix=<path_to_install_libssh2> --disable-shared && make install

(replacing <paths> as appropriate).

Copy

	<path_to_install_libssh2>/lib/libssh2.a

into the Libraries/osx directory and copy

	<path_to_install_libssh2>/include

to Headers/libssh2


=======================================================================
libcurl - 7.48
=======================================================================

Note: OpenSSL & libssh2 must be built before building libcurl.

Download the source from

	http://curl.haxx.se/download.html

and expand it into a directory on the Desktop. cd into the directory and run

	./configure CFLAGS="-arch i386 -arch x86_64 -mmacosx-version-min=10.7 -I<path to /BaseElements-Plugin/Headers/libssh>" LDFLAGS="-arch i386 -arch x86_64 -L<path to /BaseElements-Plugin/Libraries/osx>" --disable-dependency-tracking --disable-shared --with-libz --prefix=<install path> --with-libssh2

(replacing the indicated paths as appropriate).

Open the file

	include/curl/curlbuild.h

and replace the line

	#define CURL_SIZEOF_LONG 8

with

	#ifdef __x86_64__
		#define CURL_SIZEOF_LONG 8
	#else
		#define CURL_SIZEOF_LONG 4
	#endif

And then run

	make install

Copy

	<path_to_intsall_libcurl>/lib/curl.a

into the Libraries/osx directory and

	<path_to_intsall_libcurl>/inlcude/curl

into Headers.


=======================================================================
duktape - 1.2.2
=======================================================================

Download the source from

	http://duktape.org/

and extract the archive to the desktop and copy the src directory to the Source directory and rename it to duktape.


=======================================================================
libjpeg-turbo - 1.4.2
=======================================================================

Download the source from

	http://www.libjpeg-turbo.org/

and extract the archive to the desktop and then

	autoreconf -fiv
	./configure --host i686-apple-darwin CFLAGS='-O3 -m32 -mmacosx-version-min=10.7' LDFLAGS=-m32 --without-simd	make install prefix=~/Desktop/build32

Then

	make distclean
	./configure --host x86_64-apple-darwin CFLAGS='-mmacosx-version-min=10.7' --without-simd
	make install prefix=~/Desktop/build64
	lipo -create ~/Desktop/build32/lib/libturbojpeg.a ~/Desktop/build64/lib/libturbojpeg.a -output <path to BaseElements-Plugin>/Libraries/osx/libturbojpeg.a

Then rename ~/Desktop/build/include to ~/Desktop/build/libturbojpeg and copy the directory into Headers.


=======================================================================
utf8-cpp
=======================================================================

Download from

	http://utfcpp.sourceforge.net/

and place the source/utf8.h file and source/utf8 directory in the project Headers directory.


=======================================================================
Poco 1.7.8
=======================================================================

Download the source from

	http://pocoproject.org/download/index.html

Then, after extracting the archive

	cd poco-1.7.8-all

	./configure --cflags="-stdlib=libc++ -mmacosx-version-min=10.7" --no-sharedlibs --static --poquito --omit=Data,MongoDB,Crypto,Net,XML,JSON,PageCompiler --no-tests --no-samples --config=Darwin32
	make install DESTDIR=./Poco32
	
	./configure --cflags="-stdlib=libc++ -mmacosx-version-min=10.7" --no-sharedlibs --static --poquito --omit=Data,MongoDB,Crypto,Net,XML,JSON,PageCompiler --no-tests --no-samples --config=Darwin64
	make install DESTDIR=./Poco64
	
	cd lib/Darwin

	lipo -create i386/libPocoFoundation.a x86_64/libPocoFoundation.a -output libPocoFoundation.a
	lipo -create i386/libPocoZip.a x86_64/libPocoZip.a -output libPocoZip.a

Copy the poco libraries to the Libraries/osx directory and copy the Poco64/usr/local/include/Poco to Headers.

=======================================================================
libxml2 - 2.9.4
=======================================================================

Download the source for libxml2 from

	http://xmlsoft.org/downloads.html

and expand it into a directory on the Desktop.

	cd libxml2-2.9.4
	./configure  CFLAGS="-arch i386 -arch x86_64 -mmacosx-version-min=10.7" LDFLAGS="-arch i386 -arch x86_64" --disable-shared --without-python --without-zlib --prefix=<path to Desktop>/libxml2-2.9.4/build
	make install
	
and then copy libxml2.a from build/lib to the Libraries/osx directory and the libxml2 directory from build/include to Headers.


=======================================================================
libxslt - 1.1.29
=======================================================================

Download the source from

	http://xmlsoft.org/downloads.html

and expand it into a directory on the Desktop.

	cd libxslt-1.1.29
	./configure  CFLAGS="-arch i386 -arch x86_64 -mmacosx-version-min=10.7"  LDFLAGS="-arch i386 -arch x86_64" --disable-shared --without-python --without-crypto --prefix=<path to Desktop>/libxslt-1.1.29/build
	make install
	
and then copy libxslt.a and libexslt.a from build/lib to the Libraries/osx directory and the libxslt & libexslt directories from build/include to Headers.


=======================================================================
Windows
=======================================================================

The plug-in was built using Visual Studio 2015 Professional Upgrade 3 on Windows 10.

Download the FileMaker External Plug-In API from

	http://www.filemaker.com/support/technologies/

and place the FMWrapper directory inside the SDK's Headers directory in the Headers directory. The version of FMWrapper.lib in the Libraries\Win\win32 should be placed the Libraries directory. If building a 64-bit plug-in place the Libraries\Win\x86 in the Libraries\win32 directory.

The BaseElements plug-in is built as a static library and all third-party libraries must be built from source as static libraries (/MTd & /MT) using libcmt.lib and nafxcw.lib for release and libcrtd.lib and nafxcwd.lib for debug builds.

Unicode is used rather than the multi-byte character set.

Note: source code for some of the libraries is supplied as gzipped tar archives; there are a number of applications that can unpack these archives, for example, Stuffit Expander

	http://www.stuffit.com/win-expander.html

Another note: when doing both debug and release builds clean the project when switching from one t'other.


=======================================================================
Boost - 1.59_0
=======================================================================

The Boost FileSystem and System libraries are required.

	http://www.boost.org/

See

	more/getting_started/index.html

for instructions on compiling the Boost libraries. From the command prompt try

	cd boost_1_59_0
	bootstrap.bat
	b2 address-model=32 link=static runtime-link=static --with-thread --with-filesystem --with-date_time --with-chrono --with-regex install --prefix=build

and for 64-bit support

	b2 address-model=64 link=static runtime-link=static --with-thread --with-filesystem --with-date_time --with-chrono --with-regex install --prefix=build64


Copy the directory containing the boost headers from the build/include directory to the Headers directory and copy the files in the build/lib to Libraries/x86 and also from build64/lib to the Libraries/x64.


=======================================================================
zlib
=======================================================================

Building zlib is straightforward. Download the zlib source from

	http://www.zlib.net/

and extract the folder zlib-1.2.8 to the desktop.

Open the solution file "contrib/vstudio/vc11/zlibvc.sln" and remove ZLIB_WINAPI from the list of preprocessor definitions for both the libzstat Win32 and x64 ReleaseWithoutAsm configurations. From the "Build Menu" select "Batch Build" and select the libzstat "ReleaseWithoutAsm" configuration for both Win32 and x64, and "Build".

Move

	contrib/vstudio/vc11/x86/ZlibStatReleaseWithoutAsm/zlibstat.lib

into the Libraries/x86 directory and

	contrib/vstudio/vc11/x64/ZlibStatReleaseWithoutAsm/zlibstat.lib

into the Libraries/x64.

Copy zip.h and zconf.h from the root directory of the distribution to the Headers directory.


=======================================================================
Jansson - 2.5
=======================================================================

Download the source from

	https://github.com/GoyaPtyLtd/jansson

And

	Build->Batch
	
Build to build the two "Release" configurations.

Copy jansson.h and jansson_config.h from ./src/ to the Headers directory and win32/vs2010/Output/Release/jansson.lib  to Libraries\win32 and win32/vs2010/Output/Release/jansson.lib to Libraries\x64.


=======================================================================
liboauth - 1.0.3
=======================================================================

Note: OpenSSL should be built first.

Download the source from

	http://liboauth.sourceforge.net/

Unpack directory containing the Visual Studio solution files (from the BaseElements-Plugin Projects/Extras), open the Solution make sure the project can find the BaseElements plug-in Header and Libraries directories. Then, from Build->Batch Build build the two "Release" configurations.

Copy liboauth.h from ./src/ to the Headers directory and liboauth\Release\liboauth.lib  to Libraries\win32 and liboauth\Release\liboauth.lib to Libraries\x64.


=======================================================================
mimetic - 0.9.8
=======================================================================

Download the source from

	http://www.codesink.org/mimetic_mime_library.html#download

Edit the file mimetic/base64.h to replace the line

                *out = NL; ++out;

with

				*out = CR; ++out;
				*out = LF; ++out;

In

	Configuration Properties -> General -> Project Defaults

for MTDebug & MTRelease set

	Character Set = Use Unicode Character Set

To create 64-bit configurations go to:

Build -> Configuration Manager -> Active Solution Platform: -> <New>
	-	Type or select the new platform: -> x64
	-	Copy Settings from Win32

In the MTDebug & MTRelease configurations set:

	Configuration Properties -> Librarian -> General -> Output File -> .\.\x86\libmimetic_d.lib
	Configuration Properties -> Librarian -> General -> Output File -> .\.\x64\libmimetic_d.lib

	Configuration Properties -> Librarian -> General -> Output File -> .\.\x86\libmimetic.lib
	Configuration Properties -> Librarian -> General -> Output File -> .\.\x64\libmimetic.lib

for the 32-bit and 64-bit configurations respectively. To build both 32 and 64 bit libraries go to:

	Build -> Batch Build ... select both MTRelease configurations and then "Build"

Copy the directory containing the mimetic headers from the build/include directory to the Headers directory and copy the libraries libmimetic_d.lib & libmimetic.lib from the win32\x86 directory to the Libraries\win32 directory and from win32\x64 to Libraries\x64.


=======================================================================
libssh2 - 1.7.0
=======================================================================

Download the source from

	http://www.libssh2.org/


Open

	win32\libssh2.vcproj

and set the following Configuration Properties:

	Project Defaults -> Character Set == Use Unicode Character Set
	VC++ Directories -> Include Directories -> add the path to the BEPlugin Headers directory
	C/C++ -> Code Generation -> Runtime Library == Multi-threaded (/MT)

Comment out the line

	#define snprintf _snprintf

in libssh2_config.h.

From Batch Build select "OpenSSL LIB Release".

Copy the library from

	win32\Release_lib\libssl2.lib

into the Libraries\win32 directory and copy

	include

to the Headers directory and rename it libssh2.


For x64 builds select <New…> in the "Active Solution Platform" pop-up in the "Configuration Manager". Select x64 in "Type or select the new platform", "Copy settings from" should be Win32 and check "Create New project platforms" and click "OK".

Copy the library from

	win32\Release_lib\libssl2.lib

into the Libraries\x64 directory.


=======================================================================
OpenSSL - 1.0.2g
=======================================================================

Building OpenSSL requires that perl is installed. The ActiveState perl (Community Edition) is a good
place to start if you do not already have perl installed

	http://www.activestate.com/activeperl


Download the latest openssl source from

	http://www.openssl.org/source/

Note: if building both x86 and x64 versions unpack a clean version of the source for each build.

Unpack the archive and, using the "VS2015 x86 Native Command Prompt"

	cd openssl-1.0.2g
	perl Configure VC-WIN32 enable-static-engine no-asm
	ms\do_nt
	nmake -f ms\nt.mak

Copy out32\libeay32.lib and out32\ssleay32.lib to Libraries\win32 and copy inc32\openssl to Headers.

For x64 builds in a "VS2015 x64 Native Command Prompt" use:

	cd openssl-1.0.2g
	perl Configure VC-WIN64A enable-static-engine no-asm
	ms\do_win64a
	nmake -f ms\nt.mak

Copy out32\libeay32.lib and out32\ssleay32.lib to Libraries\x64 and copy inc32\openssl to Headers.


=======================================================================
libcurl - 7.48
=======================================================================

Note: OpenSSL & libssh2 must be built before building libcurl.

Download the source from

	http://curl.haxx.se/download.html

and expand it into a directory on the Desktop.

Open

	projects\Windows\VC14\lib\libcurl.vcproj

and set the following Configuration Properties for all projects/platforms:

	Project Defaults -> Character Set == Use Unicode Character Set
	VC++ Directories -> Include Directories -> add the path to the BEPlugin Headers/libssh directory
	VC++ Directories -> Include Directories -> add the path to the BEPlugin Headers directory
	C/C++ -> Code Generation -> Runtime Library == Multi-threaded (/MT)

In Visual Studio and select "Batch Build" and select both the x86 & x64 "LIB Release - LIB OpenSSL - LIB LibSSH2" configurations and then "Build".

Copy the library from

	build\Win32\VC14\LIB Release - LIB OpenSSL - LIB LibSSH2\libcurl.lib

into the Libraries\win32 directory and copy

	build\Win64\VC14\LIB Release - LIB OpenSSL - LIB LibSSH2\libcurl.lib

into the Libraries\x64 directory and copy

	include\curl

to the Headers directory.


=======================================================================
libiconv - 1.14 & libxml2 - 2.9.4
=======================================================================

Download the libiconv source from

	http://www.gnu.org/software/libiconv/

Download a patch to provide Visual Studio support from

	https://sites.google.com/site/kontr0kontradiktion/software/patches

and download the Windows port of the patch from

	http://gnuwin32.sourceforge.net/packages/patch.htm

Then, in a terminal prompt

	cd libiconv-1.14
	patch.exe -p1 -i ..\libiconv-1.14.vc10.patch --binary

Download the source for libxml2 from

	http://xmlsoft.org/downloads.html

and expand it into a directory on the Desktop.

Note: the full path of the directory should not contain any spaces.

Rename the folder libiconv-1.14 to libiconv-1.14.vc10

The Visual Studio solution file is in

	libxml2-2.9.4\win32\VC10

From the "Build" menu select "Configuration Manager" and then set "Active solution configuration" to Release and in the "Build" column, uncheck "runsuite".

In the Property Pages

	libxml2 -> Configuration Properties -> VC++ Directories -> Include Directories

add paths to the following directories

	libxml2-2.9.4\win32\VC10
	libxml2-2.9.4\include
	libiconv-1.14.vc10\include

and in

	libxml2 -> Configuration Properties -> General -> Project Defaults

set

	Configuration Type = Static Library (.lib)
	Character Set = Use Unicode Character Set

And also

	... -> C++ -> Preprocessor -> Preprocessor Definitions = WIN32
	... -> Linker -> Input -> Additional Dependencies = ws2_32.lib

In the Property Pages of both libxml2 & iconv set

	... -> Configuration Properties -> C/C++ -> Code Generation -> Runtime Library = Multi-threaded (/MT)

Change the line

	#elif defined(_WIN32_WCE)

to

	#elif defined(_MSC_VER)

and build the project.

Copy Release\iconv.lib & Release\libxml2.lib to the BE Plugin Libraries\win32 folder and, finally, copy

	libxml2-2.9.4\include\libxml

into the BE Plugin Headers folder and create a folder, iconv, in the BE Plugin Headers folder and copy

	libiconv-1.14.vc10\include\iconv.h

into that.

For x64 builds select <New…> in the "Active Solution Platform" pop-up in the "Configuration Manager". Select x64 in "Type or select the new platform", "Copy settings from" should be Win32 and check "Create New project platforms" and click "OK". Set the "Active solution configuration" to "Release" and uncheck "Build" for "runsuite".

Make the changes to the configuration properties as per the x86 instructions, above, and then build the project. Move

	win32/VC10/x64/Release/iconv.lib
	win32/VC10/x64/Release/libxml2.lib

to the Libraries/x64 directory.


=======================================================================
libxslt & libexslt - 1.1.29
=======================================================================

Download the source from

	http://xmlsoft.org/XSLT/downloads.html

and expand it into a directory on the Desktop.

Note: the full path of the directory should not contain any spaces.

For Win32 builds use the "VS2015 x86 Native Command Prompt" and for x64 builds the "VS2015 x64 Native Command Prompt".

Move to the win32 directory in the archive

	cd Desktop\libxslt-1.1.29\win32

Run the commands (changing the include= & lib= paths as appropriate)

32-bit

	cscript configure.js static=yes debug=no cruntime=-MT include="<path to BaseElements-Plugin\Headers>;<path to BaseElements-Plugin\Headers\iconv>" lib="<patjh tp BaseElements-Plugin>\Libraries\win32"

64-bit

	cscript configure.js static=yes debug=no cruntime=-MT include="<path to BaseElements-Plugin\Headers>;<path to BaseElements-Plugin\Headers\iconv>" lib="<patjh tp BaseElements-Plugin>\Libraries\x64"

Then

	nmake -f Makefile.msvc MFLAGS=-MT libxslta libexslta

to configure and build the source.

Finally, place the headers from the directories

	libxslt-1.1.29\libxslt & libxslt-1.1.29\libexslt

into directories, libxslt & libexslt, in the Headers directory and copy the libraries

	bin.msvc\libxslt_a.lib & bin.msvc\libexslt_a.lib

into the Libraries\x64 (or Libraries\x64) directory.

Note: if building both 32 & 64 bit libraries clean the project in between the builds.


=======================================================================
duktape - 1.2.2
=======================================================================

Download the source from

	http://duktape.org/

and extract the archive to the desktop and copy the src directory to the Source directory and rename it to duktape.


=======================================================================
libjpeg-turbo - 1.4.2
=======================================================================

To build first download and install NASM from

	http://www.nasm.us/

Download the source from

	http://www.libjpeg-turbo.org/

and extract the archive to the desktop. Download and install cmake from

	 http://www.cmake.org/download/

and then, from that directory, in a terminal window

	cmake -G "Visual Studio 14"

Open the project

	turbojpeg-static

and in

	Configuration Properties -> General -> Project Defaults

set

	Character Set = Use Unicode Character Set

and build the Release configuration. Copy turbojpeg-static.lib to the Liraries\win32 directory. For 64-bit builds either start with fresh copy of the source or clean the 32-bit Release configuration and delete the file

	CMakeCahche.txt

and then, in a terminal

	cmake -G "Visual Studio 14 Win64"

etc. and copy turbojpeg-static.lib to the Liraries/x64 directory.

Create a directory libturbojpeg in the Headers directory and copy

	jconfig.h
	jerror.j
	jmorecfg.h
	jpeglib.h
	turbo.jpg.h

into that from the source directory.


=======================================================================
utf8-cpp
=======================================================================

Download from

	http://utfcpp.sourceforge.net/

and place the source/utf8.h file and source/utf8 directory in the project Headers directory.


=======================================================================
Poco 1.7.8
=======================================================================

Download the source from

	http://pocoproject.org/download/index.html

Then, after extracting the archive set

	Configuration Properties -> General -> Project Defaults -> Character Set = Use Unicode Character Set

Then build the Zip and Foundation MT Release and Debug libraries using the projects in the respective directories.

Copy PocoFoundationmt.lib/PocoFoundationmtd.lib & PocoZipmt.lib/PocoZipmtd.lib libraries from the lib and lib64 driectories into the Libraries/win32 and Libraries/x64 directories and copy the include/Poco directory to Headers.


=======================================================================

